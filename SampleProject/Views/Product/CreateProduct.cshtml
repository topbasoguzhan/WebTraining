@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model SampleProject.Models.Product
    <script src="~/jquery/jquery.min.js"></script>
    <script src="~/jquery-validate/jquery.validate.min.js"></script>
    <script src="~/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script> @*Bu sıralamada bu kütüphaneleri uygulamamıza yüklediğimizde artık esktra kod yazmamıza gerek kalmadan mimari server'daki validation'ları direk buraya taşıyacak ve client tabanlı validation işlemleri yapmamızı sağlayacak.*@

    <div asp-validation-summary ="All">
        @*Bu sayfaya gelen model'ın state'inde error varsa eğer hepsi buraya doldurulacaktır. Css ile birlikte daha güzel bir görünüş sağlayabiliriz tabi buna. *@
    </div>


<form asp-action="CreateProduct" asp-controller="Product" method="post">
    
    <input type= "text" asp-for="ProductName" placeholder="Product name"/>
    <span asp-validation-for="ProductName"></span><br /> 
   
    <input type= "number" asp-for="Quantity" placeholder="Quantity"/> 
    <span asp-validation-for="Quantity"></span><br />  
    
    <input type= "email" asp-for="Email" placeholder="Email"/> 
    <span asp-validation-for="Email"></span><br />
    <button>Gönder</button>

</form>



@*Model Bindings Views*@
@*@model SampleProject.Models.Product
<form action="CreateProduct" method="post">Controller'ı belirtmezsek View bulunduğu Controller'ı baz alır.
    <input type ="text" asp-for="ProductName" placeholder="Product Name" />
    @Html.TextBoxFor(x => x.ProductName, "", new {
        placeholder = "Product Name"
    }) 
    üstündeki taghelper'ın HtmlHelper hali
    <br />
    <input type="number" asp-for="Quantity" placeholder="Quantity" />
    @Html.TextBoxFor(x => x.Quantity, "", new {
        placeholder = "Quantity"
        type = "number"
    }) 
    üstündeki taghelper'ın HtmlHelper hali    <br />
    Bir form nesnesini tetikleyebilmemiz için ilgili formun içerisinde bir tane button nesnesi olması gerekiyor.
    <button>Ürün Ekle</button>
</form>
Bir web uygulamasında form tetiklendiğinde içindeki inputların değerleri hedef endpoint'e gönderilir.
Post olarak gönderilir burada mesela
Form içerisindeki input nesneleri post edildiğinde ,bu nesnelere karşılık gelen propertyleri barından
bir nesneyle otomatik olarak bind edilirler.*@

@*Get data with Router view*@
@*@model SampleProject.Models.Product
<form asp-action ="VeriAl" asp-controller ="Product" method="post">
    <input asp-for="ProductName" type ="text"/> <br />
    <input asp-for="Quantity" type ="text"/> <br />
    <button>Gönder</button>    
</form>
<a asp-action ="Index" asp-controller="Home" asp-route-a="Ahmet" asp-route-b="Mehmet" asp-route-id="123" asp-route-x="awkdnalwkçd">content</a>
{controller=Home}/{action=Index}/{a}/{b}/{id}*@

@*Get data with Ajax view*@
@*<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<button id="btnGonder">Gönder</button>
<script>
    $("#btnGonder").click(() => {
        $.post("https://localhost:5001/product/verial", { a: "a data", b : "b data"});
    });
</script>*@

@*Tuple Nesne View*@
@*@model (SampleProject.Models.Product product, SampleProject.Models.User user)
    Eğer ki Bind mekanizmasında tuple türde bir nesne kullanıyorsak bu tuple nesnenin içerisindeki datalar/değerler/nesneler/object oluşturulup verilmesi gerekmekt
    <form asp-action="CreateProduct" asp-controller="Product" method="post">
        <input type="text" asp-for="product.ProductName" placeholder="ProductName"/> <br/>
        <input type="text" asp-for="user.Name" placeholder="Name"/><br />
        <button>Gönder</button>
    </form>*@